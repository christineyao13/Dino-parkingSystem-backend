buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.oocl'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.flywaydb:flyway-core')
//
    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'
    compile 'com.alibaba:fastjson:1.2.47'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-websocket
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: '2.0.4.RELEASE'

    runtime('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.0.0'

    testCompile 'io.rest-assured:rest-assured:3.0.6'
    testCompile 'io.rest-assured:json-schema-validator:3.1.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0'
    testCompile 'org.mockito:mockito-junit-jupiter:2.18.3'
    testCompile 'org.junit.vintage:junit-vintage-engine:5.2.0'
    // Use JUnit test framework
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.mockito:mockito-core:2.19.0'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'

}
if (project.plugins.findPlugin('jacoco')) {
    jacoco {
        toolVersion = '0.8.1'
    }
}

test {

    filter {
        includeTestsMatching '*Test'
    }

    useJUnitPlatform {
        excludeTags 'demo'

    }

    testLogging {
        events 'passed', 'skipped', 'failed'
    }


    if (project.plugins.findPlugin('jacoco')) {
        finalizedBy jacocoTestReport
    }
}
